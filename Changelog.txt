Version 7.6.0
- Added new Spin2_v52 keywords
- Fixed spin2 \ interaction with ABORT
- Fixed initialization of packed structures
- Fixed some incorrect file names in zip files
- Fixed a number of bugs in spin2 pointer operations

Version 7.5.1
- Added ioctl function to libc.a
- Fixed snprintf return values
- Improved interaction of conditional assembly and temporary labels
- Suppress combining of memory operations across a wait instruction

Version 7.5.0
- Fixed CMP with src-only registers like PHSA
- Overhauled constant definition code to better support module
parameters. This should largely be invisible to users, but bugs may
have crept in.

Version 7.4.4
- Added some missing libc.a files (thanks to Ada)
- Fixed parameter checking for varargs function variables
- Slightly improved module constant overrides; significant issues remain

Version 7.4.3
- Remove some unused debug strings when debugging is not enabled
- Use stack allocation for passing struct arguments

Version 7.4.2
- Added missing __builtin_frac keyword for C

Version 7.4.1
- Made `@@@func` return the address of the first instruction of the
function func, in both Spin2 and C.
- Fixed an internal error computing offsets in structures stored in registers

Version 7.4.0
- Fixed some errors in C __pasm parsing
- Fixed compile time calculations of QLOG and QEXP (thanks to Ada)
- Fixed many incorrect address calculations for Spin2 ^x variables
- Fixed parsing of large immediate addresses for inline asm call/jmp
- Fixed a long standing bug in loop reduction
- Improved some nucode peephole optimizations
- Some longfill optimizations and bug fixes (thanks to Ada)

Version 7.3.0
- Allow `__attribute__((packed))` on C structs
- Add `-Wbuiltin-fallback` for warning when builtin functions must call libraries
- Make Spin2 structs actually packed
- Fix parsing of `[++]` and `[--]` as pre operators
- Fixed error reporting around __builtin_printf
- Fixed callpa #x, ##longx (keep 20 bits for addresses, not 18)
- Fixed error reporting for P2_DST_CONST_OK instructions
- Fixed passing of structs containing non-long-sized items
- Implemented `%interface` for Spin2
- Updated __builtin_printf to handle %X

Version 7.2.1
- Use _rxpin as repository to hold frequency for gbrk debug
- Fixed "short unsigned" declarations in C

Version 7.2.0
- Add _[n] syntax for skipping assignments in Spin2
- Added TASKHLT pseudo-variable
- Fixed usage of sub-objects in Spin2
- Fixed compilation of Spin1 files containing a `_` constant (thanks, Ada!)
- Fixed a long standing memory evaluation order bug

Version 7.1.2
- Fix namespace usage during initial address assignment (so labels in namespaces work in ORG/RES/FIT etc.)
- Fix some issues around array address calculations in Spin2
- Fix struct usage in DAT sections

Version 7.1.1
- Fixed using struct names for return values and parameters in Spin2
- Improved code generation for small structs containing arrays
- Improved some forward branches in P1 LMM mode

Version 7.1.0
- Added _rxpoll() to check for character without a timeout
- Reverted _rx* functions to no longer use 28 bit internal buffer; this is less resilient to P2 side timing changes, but better if PC timing is uncertain
- Added new Spin2 @\"string" for strings with embedded C-style escapes
- Added DITTO to duplicate code/data in Spin2 assembly
- Added some of the upcoming Spin2 v51 float functions
- Added %namesp feature for DAT namespaces
- Made it possible to add `: structname` to method pointer usage in Spin2
- Many internal changes to support DITTO and future assembly work
- Updated -gbrk debug code (thanks Ada)
- Use cluster size for stat() st_blksize on FAT32

Version 7.0.5
- Fixed internal handle usage to avoid conflicts with BASIC hard-coded handles
- Fixed potential inline register re-use bug (thanks to Ada)

Version 7.0.4
- Added `-Opeek-args` optimization flag (the optimization was always there, this provides a way to disable it)
- Fixed an issue with casting to different size in nucode
- Fixed incorrect line info in some DEBUG statements
- Fixed incorrect re-use of parameter registers near functions that have an ABORT or THROW

Version 7.0.3
- Fixed .fpide search so file names are relative to the .fpide file
- Improved listing file tracking of COG pc (still buggy, but better)
- Made inline function expansion more robust
- Remove binary output when errors are detected in final compilation

Version 7.0.2
- Avoid a crash if a .fpide file is not found
- Fixed a problem with `loc #\imm` in inline asm

Version 7.0.1
- Fixed incorrect casts of arrays
- Fixed incorrect handling of weak symbol aliases
- Put a dummy entry at the beginning of the method table, to represent NULL
- Removed unnecessary definition of PINMODE

Version 7.0.0
- Added Spin2 structures (basically small objects)
- Added Spin2 TASK functions
- Added BOOL debug modifier for -g
- Added some of the v44 Spin2 builtin methods like byteswap
- Added warning for rep without @
- Added %QUAD keyword for 64 bit variables in Spin2
- Added some experimental optimizations (thanks to Ada)
- Added ability to fall back to more compatible inline assembly (-Ono-fast-inline-asm)
- Allowed RET in fcache'd inline assembly
- Cleaned up the Spin parser to enable direct access to struct/obj members
- Fixed long relative branches (tjz, djnz, etc.)
- Fixed incorrect handling of simple for loops with unsigned variables
- Fixed return values from fwrite and fread
- Fixed result type of ?:, particularly for long long
- Improved some debug error messages
- Only use the stack for variables whose address is actually taken (thanks to Ada for this!)
- Modified _BlockDevice data structure (used for littlefs, but someday may be used for fatfs too)
- Made _float_tointeger() saturate when the result is too big/small
- Made off_t be 64 bits, to allow for files > 2GB
- Made the preprocessor case-insensitive by default (for Spin and BASIC)
- Revised file systems to all read from devices; this makes it possible to do loopback file systems or to use non-standard devices for file systems
- Suppress some asm warnings when building assembler output

Version 6.9.10
- Fix compilation error when GETWORD is replaced by MOV or MUL
- Fix varargs calls in nucode when no varying arguments present
- Fix an incorrect warning about locals shadowing globals in C

Version 6.9.9
- Fixed `--compress` flag on Windows
- Added `--zip` flag to flexcc
- Improved handling of file names in .zip output
- Improved error message for sizeof(x) when x is undefined

Version 6.9.8
- Fix `#foo+CONST` calculation

Version 6.9.7
- Fixed infinite loop when CORDIC and Read/Write optimizations fight
- Fixed potential crash when compiling empty functions
- Allow `#foo+CONST` for inline assembly when `foo` is a HUB label

Version 6.9.6
- Added a peephole for some address calculations (as suggested by Evan)
- Fixed some built-in functions in spin2cpp

Version 6.9.5
- Fixed immediate ranges for load/store, and made out of range immediates an error (thanks to Ada)
- Fixed an inappropriate memory forwarding with WZ (also thanks to Ada)
- Made sure arrays of bytes are put into memory, even if inside structs or unions

Version 6.9.4
- Fixed a use of uninitialized memory on 32 bit platforms
- Skip running compression & similar passes when there are errors

Version 6.9.3
- Fixed typo in datetime
- Ignore ' style comments in #define definitions

Version 6.9.2
- Fixed $ relative ORGF (thanks, Ada)
- Fixed annoying error spam with bad instructions when -l given
- Fixed a missing type check which caused vfscanf() to fail to compile
- Fixed incorrect conversion of multiplication into shifts in nucode
- Fixed alignment requirements for boolean types

Version 6.9.1
- Fixed initialization of boolean types
- Fixed several bugs around booleans
- Reduced storage size required for boolean types (in most cases)

Version 6.9.0
- Added new optimization to merge duplicate functions (only at -O2, and so far only works for small functions)
- Extract side effects in more cases to avoid errors with ++,-- in complex expressions
- Fixed some nucode compilation problems with the C test suite
- Fixed failure to allocate memory for local variables in some cases
- Fixed incorrect removal of some functions that were not completely inlined
- Fixed sizeof() for boolean types
- Fixed incorrect test for 16 bit multiplies on P2
- Fixed a problem with CASE statements in Spin (thanks again, Ada!)
- Updated SD card code to work better and in more configurations (thanks to Evan and Ada)

Version 6.8.1
- Fixed using new keywords like `bytes` in parameters with default values

Version 6.8.0
- Added support for `%"xyzw"` constants in Spin2
- Added locking for host file system I/O
- Added `--compress` flag to compress binaries (courtesy of Ada)
- Fixed incorrect inline assembly for `#outb` and other hw registers
- Made `@foo.bar` work when `bar` is a label
- Supported PNut v43 `{Spin2_vNN}` version comments

Version 6.7.2
- Added putchar to libc.a
- Added another optimization for more AND x, #255 cases.

Version 6.7.1
- Added a memory read optimization in -O2, courtesy of Ada
- Added a peephole optimization for WRBYTE x,y after AND x,#255
- Fixed a problem in DEBUG() printing functions with multiple return values
- Fixed some 32/64 bit confusion in Spin comparison operators

Version 6.7.0
- Added new Spin2 lstring/bytes/words/longs keywords
- Added versioning for Spin2 language files, controlled by {$ver NN} or {vNN}
- Fixed potential bug in shl/shr peephole optimization
- Made SEND() work in the various bytecode interpreters
- More forceful warning for return without a declared result in Spin2
- Optimized 16 bit multiplications more often

Version 6.6.2
- Added warning (-Warray-index) for constant array indices out of bounds
- Allow warnings and optimizations to be turned off with a `no-` prefix (so `warn(no-init-vars)` is like `warn(!init-vars)`).
- Added some peephole optimizations to remove unnecessary sign extension
- Added peephole optimizations for sequences of shifts/adds/subs
- Parse --optimize= flag (spin2cpp) in a slightly more flexible way
- Some internal changes to make recovering from missing xxd easier

Version 6.6.1
- Changed type of `dat` array in C++ output to `unsigned char`
- Fixed function type usage in -2nu for some Spin method pointers
- Updated copyright notices in COPYING.LIB

Version 6.6.0
- Added pc_key and pc_mouse to -gbrk
- Added missing !! and ! postfix operators for Spin2
- Implemented proper boolean type for C
- Fixed -- operator for floats
- Made the BASIC boolean type a distinct type
- Made BASIC booleans print as "true" and "false"

Version 6.5.4
- Minor optimization improvement (and major documentation improvements) courtesy of Ada

Version 6.5.3
- Fixed an incorrect relocation check that caused spurious internal errors
- Implemented NAN() method for Spin2
- Implemented rename for host (9P) file system
- Improved error message for objects that are not found
- Reduced likelihood of duplicate function definitions in sub-objects

Version 6.5.2
- Really added BASIC date/time functions (inadvertently not checked in)
- Fixed *scanf() for floating point values
- Fixed a problem parsing attributes attached to static functions.

Version 6.5.1
- Changed some warnings about unused wcz flags into errors (when the corresponding instruction requires the flags)
- Fixed some problems with line numbers in errors & warnings after #include
- Fixed a potential bug with fcaching of loops with a branch between them (thanks to Ada)
- Fixed array access in ORG code in nu output
- Improved some error messages
- Various portability improvements for the source code itself

Version 6.5.0
- Added MKDIR function for BASIC
- Added support for NeoYume style ARGv parameters in C
- Added execl() function in C
- Added DATE$, TIME$, and SETTIME functions to BASIC
- Added rewind() function in C
- Allow arguments to be passed in the BASIC CHAIN function
- Fixed `-x` option in flexcc
- Fixed interaction between Parallax FS and stdio FILEs when multiple FILEs are open
- Fixed missing mbrtowc implementation
- Fixed overly agressive type checking on BASIC CPU() for asm code
- Fixed Spin2 issue with variables named `result` in void functions
- Implemented new Spin2 REPEAT n : i syntax (thanks, Ada!), and later added REPEAT n WITH i variant
- Keep a small FCACHE even in -O0, to allow ORG to function as expected
- Made _geterror() clear the error number
- Allow & operator for string concatenation in BASIC
- Re-factored some code to reduce bloat a bit
- Updated Parallax file system to new version from Chip and Stephen

Version 6.4.0
- Added getcrc() builtin for Spin2
- Added VFS layer for Parallax flash file system
- Added recognition for "$" and "%" to __builtin_atoi
- Changed littlefs to not return . and .. entries in path search (so it matches host fs and FATFS)
- Fixed compilation error for object arrays in bytecode
- Fixed some quirks in the space/tab warning code
- Fixed incorrect expansion of field[ptr][n]~~
- Fixed an incompatibility between _tx and debug()
- Fixed timeout in _rxraw() (test was wrong way around)
- Improved range of sin and cos functions
- Improved performance of flash access in littlefs (thanks, Evan!)
- Updated -gbrk code to most recent from Chip, and add support for brk #0 interactive debug (thanks, Ada!)

Version 6.3.0
- Added #pragma exportdef to make defines apply in other files. This
  provides another way for top level objects to control sub-objects' behavior.
- Added freopen(), tmpfile(), mktemp(), and some other stdio functions
- Added some missing math functions
- Cleaned up PSRAM access methods and made them more consistent
- Correctly handled casts to void in nucode output
- Fixed some problems with sizeof() used to declare local variables
- Fixed incorrect multiple casting of union initialization
- Fixed incorrect evaluation of unsigned constant expressions
- Fixed an over-eager register rename in the optimizer
- Fixed a bug which caused incorrect type inference for method variables in P1 ROM bytecode
- Several improvements to C locale() related functions

Version 6.2.3
- Added strpbrk(), strcoll(), strspn() functions for the C library
- Fixed a potential crash in Spin2 parsing of @func()
- Fixed taking the difference of a pointer and generic value

Version 6.2.2
- Fixed some 64 bit constant issues with DIR/OUT/IN manipulation
- Make sure garbage collector does not reclaim BASIC I/O wrapper
- Reverted waitatn() change from 6.2.0

Version 6.2.1
- Added a check for i <= 0 in mid$(a, i, j)
- Fixed a bug in calculating fcache size
- Fixed @x-@y expressions in P1 bytecode DAT section
- Fixed some array offset calculations in P1 bytecode (thanks Ada)
- Fixed object arrays in P1 bytecode (thanks again to Ada)
- Fixed returning classes from functions, at least for some common cases

Version 6.2.0
- Changed waitatn() to use a pollatn() loop like the Spin2 interpreter does
- Extended littlefs code to allow multiple instances
- Fixed offset computation when structs have 8 byte subfields
- Fixed a bug in alignment of 64 bit integers
- Implemented new method pointer code for PASM backends that does not require memory allocation.
- Implemented interfaces in BASIC
- Optimized some 64 bit operations on constants (thanks to Ada)
- Various other assembly optimizations, again due to Ada

Version 6.1.8
- Changed maximum number of entries in multiple assignments from 8 to 16
- Fixed multiple uses of LET in BASIC programs
- Made sure class types are resolved when they are used as function returns
- Made UTF-8 the default encoding for FatFS (configurable via FF_LFN_UNICODE)

Version 6.1.7
- Added `DEBUG_DISABLE` constant to disable DEBUG() in Spin2 objects
- Added %b flag for binary output in printf
- Added ubin support for printf debug
- Made `virtual` a reserved keyword in C++
- Reduced memory usage of default printf

Version 6.1.6
- Added ability to double quote to include quotes in literal BASIC strings
- Allowed BASIC string constants to initialize other consts
- Fixed a problem with declaring new types that are arrays of objects
- Fixed a bug with calculating bits in BASIC direction() and output()
- Implemented flush() for FATFS files (thanks to Ada)
- Improved some error messages
- In C++ output, treat unknown types in prints as generic
- Made `interface` and `implements` reserved keywords in BASIC
- Made BASIC use of + operator on strings more consistent
- Optimized a few BASIC string expressions
- Optimized calculating length of string literals

Version 6.1.5
- Added warning about deleting unused user CORDIC instructions
- Fixed a bug in handling of (*X++) ^= N
- Fixed a bug when inlining functions with small local arrays

Version 6.1.4
- Fixed incorrect paths in libc.a

Version 6.1.3
- Allowed -I directives in .fpide files
- Fixed incorrect macro definitions in .fpide files
- Fixed a number of places where incorrect line numbers were used for errors
- Fixed an incorrect partially applied loop optimization
- Fixed language type used for BASIC main program when mixed languages are in use
- Improved handling of .. and . in C library
- Reduced register requirements for inlined functions
- Reduced some C/BASIC file I/O incompatibilities

Version 6.1.2
- Added files included by FILE directive to .zip files
- Fixed an optimizer bug around the P1 PHSx registers
- Fixed incorrect constant optimization of inline assembly (caught by Ada Gottensträter)
- Fixed some missing optimizations when -l was enabled
- Fixed incorrect assembly output for files not ending in newline when -l is on
- Fixed final value of loop variables after loop is transformed to djnz
- Fixed PTRx offsetting in C inline asm
- Fixed bugs in ELSE conditional assembly parsing.
- Implemented __builtin_expect (thanks, Ada!)
- Several additional optimizations contributed by Ada
- Skip symbol resolution when outputting .o files, fixes some output bugs
- Made object constant override expressions be evaluated in the parent object
- Minor optimization for expressions like 2*x

Version 6.1.1
- Added special -D_XTLFREQ=x and -D_XINFREQ=x command line defines
- Fixed IF in assembly debug
- Fixed constant SIGNX evaluation
- Made the preprocessor ignore characters after a line comment start (like ')
- Made jmp relative calculations act more like the official compiler
- Use proper full name for C include files in zip creation
- Remove .zip file on failed creation

Version 6.1.0
- Added basic support for compiling project files (.fpide or .side)
- Implemented ^@ and FIELD[] for Spin2
- Implemented conditional assembly instructions if, elseif, else, and endif
- Merged Ada's improved strlen() function
- Merged some register allocation improvements from Ada
- Provide syntax for C `struct using` to override constants in Spin2 objects

Version 6.0.5
- Fixed an optimizer bug with inlined functions
- Fixed a spurious "use before set" warning in sizeof()
- Improved the error message for try blocks in bytecode output

Version 6.0.4
- Fixed incorrect file name after #include in some rare cases (when the included file's name exactly matches the end of the original file)

Version 6.0.3
- Fix a bug in P1 listing file output

Version 6.0.2
- Fixed an internal error where BASIC array references sometimes look like calls
- Fixed some spurious warnings about 0-0 style operands in inline assembly
- Fixed number of blocks calculation in FatFS stat() function.
- Fixed some "unknown type xx passed to IsArrayType" errors

Version 6.0.1
- Added missing file for LittleFS file system.

Version 6.0.0
- Added interpreter and code size printing if --sizes is given
- Added atof() and strtof() functions
- Added %p format flag to printf
- Allow newlines inside BASIC initializations
- Automatically reset baud rate on _clkset()
- Disabled SIMPLE_IO printf optimization because it was interacting poorly with symbol resolution
- Fixed _ assignment in nucode output
- Fixed calculation of FVAR/FVARS when labels are unknown
- Fixed a problem with unnamed parameters not being counted in code generation
- Fixed _getus() and _getms() in -2nu
- Fixed _waitms and _waitus timing
- Fixed type of `_clkmode` on P2 (it was byte instead of long)
- Fixed compilation error on some signed multiplies
- Fixed calling varargs functions from Spin in bytecode
- Fixed BASIC LINE INPUT when no explicit file handle is given
- Fixed umount of SD card to clear pins in use
- Implemented _muldiv64 for bytecode
- Made Spin2 loop behaviour match that of other languages (like PNut v38)
- Optimized nucode output considerably
- Passing a NULL pointer to mount() now causes an error, rather than unmounting
- Some internal cleanups in the code generators

Version 5.9.28
- Added some simple loop optimizations to transform loops into DJNZ form at level -O1
- Fixed incorrect code generated sometimes for fetching the upper 32 bits of a 64 bit function result.
- Fixed REV operator in nucode output
- Improved performance of nucode generated code
- Optimized P1 multiply code (thanks to Ada for this)

Version 5.9.27
- Added some more missing functions from libc
- Added some additional asm optimizations thanks to Ada
- Fixed an out of memory crash due to nested structs in -O0
- Fixed assembly warnings that were accidentally broken
- Made more fatfs options settable on the command line (thanks, Ada)
- Made P2 signed multiply always generate inline code
- Optimized the 9p filesystem code somewhat

Version 5.9.26
- Added __FLEX_MAJOR__, __FLEX_MINOR__, and __FLEX_REV__ macros
- Added __asm__ alias for __asm in C
- Fixed a bug when __builtin_clz was applied to memory
- Improved performance of symbol resolution in sub-modules (some complicated code was so slow it seemed to hang)

Version 5.9.25
- Added __P1__ macro defined only for P1 compiles
- Added UMOUNT command for BASIC
- Added an `inline` attribute to encourage functions to be inlined
- Added _cogstart_cog and related defines to propeller2.h
- Added a new file libc.spin2 to make calling the C library easier from Spin2
- Fixed ALIGNL in Spin2 VAR blocks
- Improved some error messages
- Made heap corruption code check depend on -g flag
- Made sure variables are properly aligned in Spin2 for P1
- Tweaked file names in zip files to be compatible with more unzippers

Version 5.9.24
- Added --zip flag to create archive of source files
- Allowed __fromfile inside classes, and fixed symbol resolution for this case
- Fixed using local constants for default parameters in methods
- Fixed a compiler bug affecting fscanf
- Handled some more bitfield expressions in nucode & bytecode output
- Improved output of -f, and added #include'd files to that output
- Implemented ungetc function

Version 5.9.23
- Enable DEBUG in inline assembly if -gbrk is active
- Fixed .lbl+n expressions in inline assembly
- Fixed Spin2 loops so that the correct value is in the variable if the loop is quit
- Fixed Nucode evaluation of some bit operations
- Fixed a crash when duplicate names declared in anonymous structs
- Made sure all registers involved in a large data structure are allocated if any of them are used

Version 5.9.22
- Added control over individual warnings
- Define a symbol __DEBUG__ when -g or -gbrk is given
- Fixed indirect method pointer calls in Spin2 (like LONG[x](foo))
- Fixed compiling some boolean expressions involving 64 bit integers
- Fixed QCOS and QSIN when used with angles larger than twopi
- Fixed some signed/unsigned conflicts in Spin constant evaluation
- Made foo.[n] produce the same results on P2 as the usual Spin2 compiler, by having it extract the upper bits to find the range of bits affected
- New optimization to use SUMxx instructions if possible (thanks Ada!)
- New optimizations for memcpy/memmove (again, thanks to Ada)
- Removed <- and -> operators from Spin2 (use ROL and ROR instead)
- Revised P2 frequency calculations to match Chip's latest version
- Some floating point optimizations from Ada
- Several other miscellaneous optimizations from Ada
- Spin2cpp now respects '!cse' optimization flag.
- Warnings about C strings being passed to non-const pointers now only happen with -Wall

Version 5.9.21
- Automatically zero local Spin2 variables
- Fixed loop test for downwards loops with steps > 1.
- Fixed some problems with variable offsets in Spin
- Fixed an incorrect read/write optimization affecting assembly output
- Improved handling of two dimensional arrays in BASIC
- Improved handling of method pointers in Spin2
- Optimized ZEROX (thanks Ada)
- Optimize some "obvious" 64 bit shifts
- Restored generation of all public methods in spin2cpp C and C++ output

Version 5.9.20
- Added a new pass to re-calculate object sizes after symbol resolution (fixes some problems with memory overruns in C code used as Spin object)
- Added STRCOPY Spin2 function
- Fixed a crash when trivial C programs are submitted
- Fixed swapping 64 bit variables
- Fixed failure to change arrays to pointers in some C expressions
- Fixed 64 bit integer preincrement
- Fixed initializing local reference variables
- Fixed += and similar operators when used with references
- Implemented object constant overrides (object parameters) for Spin
- Implemented ... line continuation for Spin
- Inline assembly can now access multiple longs of large local variables.
- More fixes to C struct initialization
- Made debug output and C library output work better together
- Made repeat loops in Spin2 finish with the same value as in PNut
- Optimized initializers of large local variables
- Optimized long fills on P2 with SETQ (thanks to Ada Gottensträter again!)
- Remove unused methods even at -O0 optimization
- Relax type checking in C for pointer/integer conversion

Version 5.9.19
- Added a warning for mixing tabs and spaces in Spin code
- Added strtok() function to C library
- Fixed some incorrect C array declarations
- Fixed precision not being reset in printf
- Fixed incorrect leaf function analysis in Spin functions using floats
- Fixed lut function bug that crept in when memory was reserved at start of LUT
- Fixed padding while initializing structures
- Implemented -E and -H flags for nu bytecode
- Implemented SPR[] in bytecode (thanks to Ada Gottensträter)
- Improved register allocation in leaf functions (thanks Ada)
- Improved optimization for small wait loops (also thanks to Ada)
- Made SPR[] work more like Spin1 (thanks Ada)
- Reduced register usage in local array initialization
- Reimplemented TYPEOF to be more useful

Version 5.9.18
- Fixed missing # on output of jint style inline asm instructions
- Fixed some bugs in the BASIC open wrapper (handling of close and recv were dodgy)
- Fixed use of function aliases in submodules
- Fixed an address calculation bug in bytecode
- Made some nucode code generation improvements
- Minor tweak to preprocessor to better handle files that do not end with a newline

Version 5.9.17
- Added '=' as alternate immediate syntax for use in C macros.
- Added REGISTER keyword to BASIC
- Fixed ++ and -- operators for 64 bit variables
- Fixed signed modulus for 64 bit integers
- Fixed a bug in varargs handling for 64 bit values in bytecode
- Fixed output of C boolean operators in bytecode
- Fixed some problems with 32 to 64 bit casts in ASM output
- Fixed a bad check for immediate values in P1 rdlong/rdbyte/etc.
- Fixed a warning in BASIC about the _timezone variable.
- Made ALIGNW and ALIGNL keywords Spin2 only (some older Spin1 programs used these)
- On P2, allow coginit() of COG and LUT functions.
- Support register variables in C and BASIC
- Renamed LMM pc to __pc to avoid conflict with user code

Version 5.9.16
- Added UNION classes to BASIC
- Fixed a number of problems with 64 bit variables in bytecode
- Fixed an initializer bug in unions

Version 5.9.15
- Added definitions for PR0-PR7 registers in Spin2
- Added ORGH/END inline assembly in Spin2 for non-optimized hub based inline asm.
- Added MUXQ optimization for P2 pinwrite.
- Fixed several missing 64 bit arithmetic operations.
- Fixed evaluation of unary `+`.
- Fixed incorrect optimization around FCACHE.
- Made first 16 LUT registers reserved for user code.
- Prevent REP loop optimization in ORG and volatile asm

Version 5.9.14
- Added check for limit in ORG and ORGH
- Added warning for incompatible types in comparisons
- Fixed an incorrect optimization across calls
- Fixed dpeek/dpoke definitions in BASIC, and added lpeek/lpoke
- Improved support for 64 bit integers
- Increased default heap size on P2 to 6000 bytes
- Removed some bad debug printfs from sdmm.cc

Version 5.9.13
- Added base 4 and base 8 literals to BASIC
- Added __builtin_movbyts() intrinsic
- Added varargs support to bytecode backends
- Added PEEK, POKE, DPEEK, DPOKE, and VARPTR to BASIC
- Allow looking up static member variables and labels
- Fixed incorrect varargs leaf function optimization
- Fixed precedence of '\' in Spin when used for catching
- Fixed missing downcast when 64 bit arguments are passed to 32 bit parameters
- Fixed operator precedence of long @addr[n] in Spin DAT sections
- Make C const arrays always go into DAT, to save space

Version 5.9.12
- Added LINE INPUT to BASIC
- Added definitions for BUFSIZ and L_tmpnam to stdio.h
- Added FREEFILE function to BASIC
- Added new C intrinsics __builtin_bswap16, __builtin_bswap32, __builtin_parity, __builtin_popcount
- Changed the way C global variables are handled in objects; they used to always be shared between variables, but now can be proper member variables in some circumstances
- Fixed "CLASS USING" file name lookups inside CLASS in BASIC
- Fixed incorrect address calculation when AUGD is needed for CALLPA
- Made clkmode_ and similar symbols accessible in submodules
- Modified SD card code to (I hope) support multiple cards

Version 5.9.11
- Added BOOLEAN keyword to BASIC
- Added some additional optimizations (thanks again, Ada!)
- Added -Wextra flag (ignored for now) to flexcc
- Fixed -gbrk bug which crept in last release
- Fixed some problems parsing C function pointer type declarations
- Fixed some optimizations incorrectly happening to ORG/END assembly
- Fixed some other incorrect optimizations
- Fixed "extern" in C function definitions
- Made it so defining a _clkmode enum in C works as intended
- Reserved REDIM and PRESERVE keywords in BASIC
- Some more PASM optimizations from Ada (thanks!)

Version 5.9.10
- Added a LOT of helpful optimizations contributed by Ada Gottensträter
- Added __HAVE_FCACHE__ define if FCACHE is enabled (also contributed by Ada)
- Added --nostdlib flag to suppress default include files
- Added KILL function to delete files in BASIC
- Added ELSE clause to single line IF in BASIC
- Actually fail compilation if a preprocessor #error directive is found in Spin
- Fixed some bugs in time related functions
- Fixed FCACHE not being enabled during system module compilation
- Fixed a nasty condition code printing bug (thanks Ada!)
- Fixed DEBUG with multiple return valued functions
- Merged Ada's change to support Shift-JIS character encoding
- Merged Evan's smartpin SD card reading code for much faster SD card access on P2
- Updated FatFs to newer version

Version 5.9.9
- Added special preprocessor comments {$flexspin ... } for FlexSpin specific code.
- Allow dynamic sign/zero extend on P1 (thanks Ada)
- Fixed variable redeclaration in Basic OPTION IMPLICIT
- Fixed an immediate addressing bug that showed up with DECLARE ALIAS sometimes
- Fixed curdir$() problems in BASIC
- Fixed an issue with += of strings where the rhs is a function call
- Fixed some bugs in PUT/GET processing when the result is read
- Made dir$("*",fbNormal) skip directories
- Preliminary support for anonymous structures and unions in C
- Recognized new Spin2 BYTEFIT and WORDFIT keywords

Version 5.9.8
- Fixed a crash in nucode compilation
- Fixed DECLARE ALIAS in bytecode mode

Version 5.9.7
- Added some more bit-banging optimizations (e.g. bith/bitl -> bitc)
- Added a new optimization for simple FOR loops with constant bounds
- Added special function optimizations for pinread/pinwrite
- Added SIZEOF operator to BASIC
- Added BITREV function to BASIC
- Added ALIAS, DECLARE, EXTERN, LINE, and LIB keywords to BASIC
- Added support for DLY() to default -g debugging
- Added #pragma ignore_case directive
- Added DECLARE ALIAS to BASIC
- Allowed printing of pointers in BASIC
- Changed default runtime tests to use P2 instead of P1
- Fixed a few missing definitions in <propeller.h>
- Fixed a problem with SendRecvDevice() in BASIC
- Fixed an incorrect optimization for loops containing GOSUB
- Fixed multiple args in DEBUG() statements with -gbrk
- Fixed a problem with extern declarations in C not working in .o files
- Fixed in bug in mis-detecting use of result values in bytecode output
- Fixed a nasty bug for functions with more than 99 local registers used
- Fixed a bug in DIR$() in subdirectories of SD cards
- Fixed printing of values passed by reference
- Improved C++ compatibility for class functions, including supporting "static" in classes and declarations of functions outside the class
- Made RESULT no longer a reserved word in Spin2, should fix a number of bugs
- Optimized local variable push/pull (thanks Ada)
- Reduced number of temporary registers needed by the compiler

Version 5.9.6
- Added error for non-constant compile time initializers
- Allow ALIGNL and ALIGNW in VAR sections
- Fixed incorrect error when printing DEBUG expressions containing function calls
- Fixed error in assignment chain processing in Spin1 when one item is a function
- Fixed some bugs in parsing C struct declarations
- Issue an error for redefinition with different type inside a class

Version 5.9.5
- Added CHAIN #n for BASIC, and _fexecve(fd, argv, envp) for C
- Fixed incorrect static function detection when coginit is used (affected reSound)
- Fixed a serious memory overflow bug in fopen()

Version 5.9.4
- Added some error checking for parameters of CPU/coginit/cognew
- Added --charset=C for changing runtime character set
- Fixed Spin2 round(), trunc(), and float() operators for variable expressions
- Fixed multiply by -1 when local variables are on the stack
- Fixed expansion of macros which contain other macros
- Fixed ABORT in Spin functions with no return statements
- Fixed C _clkfreq constant in multiple enums problem
- Implemented subset of try/catch for C++
- Improved Catalina compatibility for spin2cpp
- Various improvements to the nu code backend

Version 5.9.3
- Fixed automatic detection of floats for printf/scanf
- Fixed optimizer errors on SCA, XORO32, and similar instructions
- Fixed a spurious warning about 0-0 in inline assembly
- Implemented new Spin2 floating point operations
- Prevent loops containing BRK from being optimized to REP
- Started to add some optimizations for Nu

Version 5.9.2
- Added internal definition for the BASIC number$ function
- Added experimental flag -2nu for P2 interpreter (not working much yet)
- Fixed some "backwards" repeat loops in Spin
- Fixed wrap around of getus and getms
- Fixed an optimizer bug around non-leaf functions in COG and LUT
- Fixed a problem finding extensions in -Wabs-paths
- Fixed definitions of if_x1 and if_1x condition codes
- Handled '+' and ' ' format characters in builtin printf
- Improved detection of some keywords like ASM in old code
- Improved output of expressions in DEBUG()
- New flag -gbrk for using Chip's BRK based debug output (Thanks Ada!)

Version 5.9.1
- Added support for bool, false, and true to C++
- Added some missing defines in stdint.h
- Added automatic I/O locking for PRINT, __builtin_printf, and DEBUG
- Added ability to have multiple items in BASIC CASE 
- Added "ASM_CONST" keyword to Spin
- Added optimization for x==x in integer code
- Added check for re-defining member variables in classes
- Added _SameTypes() and _HasMethod() functions to BASIC to check data types
- Changed "ASM CONST" to "CONST ASM" in BASIC
- Fixed multiple assignments in Spin (a:=b:=c) to have the same semantics as Spin
- Fixed template functions so BASIC "string" type is preserved
- Improved --interp=rom (Spin1 bytecode output) to run more programs
- New optimization: -Oremove-features removes advanced file I/O features if not needed by the program; this can a lot of space. Enabled by default in -O1.

Version 5.5.2
- Added cpustop for BASIC
- Allow relative branches between COG and LUT RAM
- Cleaned up exec() and CHAIN to clear RAM before starting the new program
- Fixed a bug which could cause duplicate struct definitions in C
- Fixed an optimizer bug where reads/writes could be incorrectly re-ordered
- Fixed an error parsing += in BASIC array operations
- Fixed a bug in *s parsing in sscanf()

Version 5.5.1
- Added a warning for ignored second parameter to `org`
- Added -Os option; similar to -O1, but favors smaller size.
- Added #warning directive to C preprocessor
- Fixed Spin startup function (should be first PUB function, not first function)
- Fixed evaluation of @ inside CONSTANT
- Fixed assembly of PTRA++[0] and PTRA++[16]
- Fixed some spurious warnings about uninitialized variables
- Fixed an optimization error for BYTE[] and WORD[]
- Fixed incorrect unary assignment operator behavior in Spin
- Fixed ~x and ~~x at top level in Spin1
- Fixed SIGNX= and ZEROX= in Spin2
- Fixed compilation of MOUNT if there is no OPEN (not a useful case, but still)
- Improved COG memory usage
- Improved conversion of longmove() in Spin to handle labels
- Made objects come after all variables in Spin
- Merged colorized error message changes from Wuerfel21.
- Optimized PRINT CHR$(x) in BASIC
- ALPHA: new bytecode backend from Wuerfel21, accessed by --interp=rom. This is not finished yet but can compile many Spin1 programs.

Version 5.5.0
- Added warning for modifying ptra in inline assembly
- Added throwifcaught command for BASIC
- Allowed '$' in inline assembly in C
- Fixed a problem with large ranges in lookup/lookdown
- Fixed a preprocessor bug which sometimes caused failure to recognize comments
- Fixed a bug in handling multiple return values that are less than long sized
- If -Wall is given, warn about uninitialized local variables
- Implemented "public" and "private" in C++ classes
- Improved listing file output by adding RES and FIT entries

Version 5.4.3
- Clear all errors on successful open
- Fixed path lookup on Windows under cmd.exe

Version 5.4.2
- Added support for range cases (a ... b) to C
- Fixed constant evaluation of some Spin2 operators
- Fixed bitfield access to memory references
- Fixed mixing reads and writes in C stdio
- Fixed mixing fgetc and fread in C stdio
- Fixed a bug in determining types of Spin2 constants in other objects

Version 5.4.1
- Added __DATE__, __TIME__, __FILE__, and __LINE__ macros
- Added documentation for __VERSION__ macro
- Allowed wc and wz on indirect jumps on P2
- Check for gosub commands inside FCACHEd code
- Fixed incorrect common sub-expression elimination after labels
- Implemented some of the missing math functions from propeller2.h

Version 5.4.0
- Added some preliminary support for 64 bit integers (not complete yet)
- Added error for testp or testb used without flags
- Added --tabs=N for specifying amount of indent due to tabs
- Added support for __FUNCTION__ in BASIC and C
- Fix incorrect types in some const initializations.
- Fixed a problem with comments in the preprocessor
- Fixed incorrect line numbers after ASMCLK
- Fixed a bug in counting parameters when some are structs
- Fixed a bug in initializing arrays with modifiers like const
- Fixed parsing of ?: in Spin2
- Fixed some union initializer bugs
- Fixed setnib/setbyte/setword encoding for abbreviated forms
- Fixed an optimizer bug in loop strength reduction
- Handle mixed float/int in C ?: operator by promoting one side as necessary
- Made some low level C functions builtins
- Made FCACHE size settable on P2
- Support debug_baud macro to some degree
- Set default baud rate for C and BASIC based on -D_BAUD=n macro
- Tweaked listing file output slightly to include comments at end of file

Version 5.3.2
- Accept ' as a digit separator as well as '_' (C++14 uses single quote)
- Avoid FCACHE in FCACHE (e.g. for loops with empty org/end)
- Disable inlining for functions explicitly placed in COG or LUT memory
- Cleaned up ABORT handling to be Spin2 compatible
- Improved removal of DEBUG() statements when -g is left out
- Some internal changes for 64 bit support (still a work in progress)
- Support ptrx[N] syntax in inline assembly

Version 5.3.1
- Added aliases for _pinw, _pinl, and _pinh in Spin (to match the documentation).
- Better error messages for some bad C function declarations.
- Cleaned up operator precedence to match Spin2
- Fixed typos in SmartSerial.spin that made it stop working
- Improved accuracy of parsing floating point constants.
- Provided default dummy functions for send() and recv()

Version 5.3.0
- Added SimpleSerial object for P1/P2 compatibility
- Added _lockrel() function for C
- Added header file with smartpin definitions (not strictly necessary in flexspin, but useful for compatibility with other compilers and Visual Studio)
- Adjusted output of floats in PRINT USING
- Allowed pin -1 to mean "no pin" in SmartSerial
- Changed the trivial Spin stub in P1 code to be compatible with openspin
  (this allows flexspin to be used to make the PropLoader fastloader)
- Changed handling of ? operator in Spin2 to be compatible with PNut
- Extended DEBUG() capability to include some backtick features
- Fixed argv[0] handling in the command line tools
- Fixed use of FCACHE in inline assembly in LUT and COG functions
- Fixed BASIC input when 127 (DEL) is read (Unix terminals use this for backspace)
- Fixed a problem with parsing floating point numbers with 32 bit compilers
- Fixed use of instructions as operators in DAT section
- Fixed parsing of large floating point numbers
- Ignored DEBUG statements completely unless -g is given
- Really fixed RECV return value
- Even in -O0, remove unused functions in C subclasses (avoids problems with duplicate symbols in stdio)
- Supported pin fields in Spin2 pin control functions

Version 5.2.0
- Added GET as keyword to BASIC
- Added GET and PUT binary I/O to BASIC
- Added _vfs_open_sdcardx() to allow explicit setting of pins for SD card
- Added new option -Wmax-errors=N to allow more errors to be printed in a run
- Added new option -Wabs-paths to print absolute paths in error messages
- Changed Spin2 member variables to be layed out in the order declared
- Fixed QCOS, QSIN
- Fixed a crash with negative ending values in repeat
- Fixed a problem with SEND(func(...)) in Spin2
- Fixed a problem with initializing two dimensional C arrays with strings
- Modified P2 serial receive to use @evanh's suggestion of 28 bit aqsync receive (so it is effectively 3 characters at a time)

Version 5.1.1
- Added QCOS and QSIN to Spin2
- Added _execve() and CHAIN functions to chain programs
- Added mkdir() function for host file system
- Fixed handling of getcwd for subdirectories
- Fixed handling of DEL in fgets() function
- Fixed GOSUB (it had bit-rotted and no longer worked properly)
- Made EXIT LOOP a synonym for EXIT DO

Version 5.1.0
- Added support for Spin2 constants clkmode_ and clkfreq_
- Added built in ASMCLK macro for Spin2
- Added CALL statement in BASIC
- Added improved error handling for BASIC
- Allow semicolons to seperate lines in C inline assembly (this makes it possible to put inline assembly in macros)
- Fixed another optimizer issue affecting C struct returns
- Fixed undefined _basic_print_unsigned error.
- Fixed a bug with pin ranges where the limits are variables and are given in (lo, hi) order
- Fixed bitfields in C structs being multiply defined
- Fixed sscanf() and similar string functions not working
- Fixed type of RECV() pointer in Spin2
- Fixed isprint() function in C
- Implemented FRAC operator for P1
- Implemented new (more accurate) IEEE floating point math routines
- Increased default buffer size for I/O on P2 (speeds up 9p operations)
- Made "append" mode force seeks to end of file before writes
- Made "_waitms" and "_waitus" work for long waits (more than a system counter rollover)
- More improvements to the BASIC strings library, again courtesy of JRoark
- New functions __builtin_frac, __builtin_mulh and __builin_muluh for C
- Put a "nop" at P2 address 0, so NULL pointers will act like empty strings

Version 5.0.8
- Added a warning for casting const pointers to non-const
- Added missing tan function to math.h
- Fixed Spin2 pinread to work correctly with multiple pins
- Fixed an optimizer bug that could cause corruption of small multi-word structs being returned from a C function
- Properly implemented compile time optimization of BASIC ASC("x") function
- New BASIC string functions from JRoark: improved implementations of some existing functions, and added functions CountStr, RemoveChar$, ReplaceChar$, and StrInt$

Version 5.0.7
- Added code to support _ret_ in inline assembly
- Fixed rdlong x, ptra[##BIG] instruction form
- Fixed some bugs in cog_run
- Fixed bit references in arrays like A[x].[y]
- Fixed uhex() bug where it only output 1 bit
- Fixed a serious off-by-one error in garbage collection code

Version 5.0.6
- Added cog_* functions from libsimpletools
- Added get_directions() and get_outputs() functions from simpletools
- Added getms() in Spin2
- Documented _pinstart() function for C
- Fixed an off-by-one in the BASIC INSERT$ function.
- Fixed errors in declarations of C modf() and frexp() functions.
- Fixed read() on terminal to break on newline if applicable
- Improved error messages for type mismatches.
- Made libsimpletext text read use _rxraw() to avoid echo.

Version 5.0.5
- Added the EVENT_* symbols for Spin2
- Added warnings for use of RES memory
- Fixed lseek with SEEK_END on 9p file system
- Fixed error reporting for bad rdxxx/wrxxx pointers
- Improved checks for language when no explicit extension is given in object names
- Updated BASIC documentation to include some built-ins that weren't documented

Version 5.0.4
- Added protection for multiple cogs calling memory allocation
- Added NEWCOG constant for COGSPIN
- Fixed a serious peephole bug in TEST/AND merging
- Fixed printing of NULL strings in BASIC
- Fixed error for wrong variable in BASIC NEXT

Version 5.0.3
- Added new reserved word `private` in BASIC (not used yet)
- Changed Makefile to accept YACCVER=bison2 or YACCVER=bison3
- Fixed off-by-one error in fs9p code
- Fixed an off-by-one error in BASIC numeric formatting
- Fixed a bad calculation in p2_clock.h
- Fixed a problem with assignment operators like += in BASIC

Version 5.0.2
- Added "noinline" attribute
- Added a warning for some non-terminating loops
- Fixed a compiler warning in ff.cc
- Fixed a bug with returning structures in C
- Fixed an optimizer bug with trying to replace ptra++
- Fixed an overly aggressive loop reduction optimization
- Made BASIC open command use "throw" to report errors

Version 5.0.1
- Added getms() and getus() for BASIC
- Allow ptra++ in BASIC assembly
- Allow use of constants from other objects in inline assembly
- Allow access to array member variables in Spin
- Convert "ret" in inline assembly to a jump to the end of it
- Fixed a C parser crash
- Fixed a problem with padding C structs
- Fixed a bug parsing strings in C __pasm
- Provided separate namespace for labels in C
- Removed support for Rev A silicon (it was not working anyway)

Version 5.0.0
- Renamed "fastspin" to "flexspin"
- Added "flexcc" compiler front end
- Added --version flag to fastspin
- Added asin(), acos(), atan(), atan2() to BASIC
- Fixed BASIC ^ operator when used with --fixedreal
- Made sin() and cos() work with --fixedreal
- New atan2() implementation using the CORDIC on P2

Version 4.5.0
- Added a warning for C functions with mismatched parameters (it used to silently accept this)
- Added "." character for PRINT USING in BASIC
- Added support for binary floating point constants in C
- Added __builtin_clz() for C
- Added gettimeofday() / settimeofday()
- Added scanf() family of functions for C
- Allowed empty FOR loops in BASIC
- Fixed a number of problems in C struct initialization
- Fixed printing floats in C when --fixedreal is given
- Fixed BASIC FOR loops with negative floating point steps
- Fixed binary and hex constants in C to be unsigned when appropriate
- Fixed a problem with passing small arrays as parameters in C
- Fixed ^ in BASIC
- Made expf and logf use the CORDIC on P2 and ROM on P1
- Made FIXED a reserved keyword in BASIC (for future expansion)
- Updated time functions to work sensibly.

Version 4.4.0
- Added simplified designated initializers (like { .x=1 }) for structs and arrays
- Added float_t and double_t to math.h
- Added fseek() and ftell() stdio functions
- Added Spin2 RECV pointer
- Fixed a hang due to multiply processing modules
- Fixed djnz out of range on P2
- Fixed \0 inside C strings
- Fixed x[n].method() type calls in Spin2
- Fixed x[n].[a] method reference lookups in Spin2
- Fixed some bugs in structure passing/return
- Fixed incorrect FOR loops using unsigned integers if counting down to 0 or up to MAXINT
- Fixed order of declarations for C enums
- Fixed nested initializers in C
- Improved warnings about missing # in PASM
- Made SEND pointer per-COG
- Made some local Spin arrays be held in registers
- Made SPR keyword be Spin1 only (in Spin2 it is "REG")
- Modified inline assembly to allow for accessing array variables
- Reduced the delay for SD card communication to speed up FatFs
- Save/restore SEND pointer in Spin2 if it is modified by a function

Version 4.3.1
- Added HUBSET(), POLLATN(), WAITATN()
- Fix void function calls in SEND
- Fixed some debug function formatting

Version 4.3.0
- P2 API Change: use call/ret instead of calla/reta
- Added finer-grained control over optimizations
- Added per-function control over optimizations
- Added preliminary implementation of DEBUG() for Spin2
- Fixed some bugs in cse and loop optimizations
- Fixed byref parameters in BASIC template functions
- Improved dead code removal

Version 4.2.8
- Added -Werror flag to turn warnings into errors
- Fixed an optimizer bug which could incorrectly delete some conditional statements
- Fixed inlining of static functions
- Made ORG force long alignment

Version 4.2.7
- Added missing waitvid builtin for P1
- Added some additional language compatibility warnings
- Better warning messages for redefining member variables
- Changed default C preprocessor mode to be GCC compatible
- Fixed some C definitions in propeller2.h
- Fixed BASIC printing of floats
- Fixed some problems with .word[N] assignments
- Fixed unnecessary jmp warning when listing file is output
- Improved heuristic for deciding between if statements and jump tables for case statements
- Optimized mul/div sequences with immediates
- Optimized jump tables on P1

Version 4.2.6
- Added sanity check for removing inlined functions (fixes an optimizer bug)
- Added __andthen__ and __orelse__ operators to Spin/Spin2.
- Fixed an optimizer bug in renaming registers
- Fixed assignments like x.byte[1] := y
- Fixed Spin AND and OR operators to evaluate both sides if they have side effects.
- Improved some error messages
- Merged improved P1 multiply/divide routines from Wuerfel21.

Version 4.2.5
- Added many more peephole optimizations
- Added -Wall flag for more warnings, including about language extensions
- Fixed the #warn preprocessor directive
- Fixed a bug in operator assignment (like +=) when both sides have side effects
- Fixed an optimizer bug where some conditional instructions were overlooked in optimizing cmp #0 cases
- Fixed a typo in TAN causing it to return bad values
- Fixed constant(@x - @y)
- Implemented _FREE and _STACK
- Improved optimization around ORG/END blocks (without touching the code inside)
- Improved FCACHE code to merge loops in some cases
- Improved inlining of functions
- On P2, use constants in the D field when we can
- Optimized special cases like x.byte[1] in Spin
- Optimized case statements with constant expressions
- Various other minor optimizations

Version 4.2.4
- Added FVAR and FVARS for Spin2
- Fixed "-C" option for case sensitivity
- Fixed detection of result variables in inline asm (e.g. polxy builtin)
- Fixed handling of # at start of line in Spin CON blocks
- Fixed handling of some Spin1 only keywords and operators
- Fixed label detection on instructions like djnf
- Fixed Spin2 ENCOD operator
- Fixed a -O2 loop optimization bug which could lose assignments inside IF
- Implemented INPUT #n in BASIC
- Improved handling of structure returns in C
- Improved handling of passing methods as function pointers
- Made the ?: ternary operator parse better in Spin2
- Optimized P2 multiplication by constants
- Optimized bytefill/bytemove on P2
- Properly supported expressions on strings (like "abc"|m) in Spin

Version 4.2.3
- Fixed some spurious "duplicate case label" errors
- Added new cpuchk() and cpuwait() functions for BASIC
- Implemented cogchk() for P1
- Implemented many additional assignment operators for Spin2
- Fixed SCAS operator for Spin2
- Simplified and optimized P2 multiply routines
- Fixed identifier lookup inside ASM SHARED in BASIC
- Changed sub-module names to include the suffix (so foo.spin may
  include foo.c as an object, which will be named foo_c)
- Replaced runs of duplicate lines in listing file with "..."
- Optimized plain REPEAT in spin to use REP instruction on P2
- Fixed SEND of functions with no return values
- Fixed an alignment bug affecting LOOKUP/LOOKDOWN on P2

Version 4.2.2
- Added <>= operator for Spin
- Added getsec() and getrnd() builtins for Spin2 and BASIC
- Added _cnth() and _cnthl() functions for C
- Improved handling of serial input by providing an explicit timeout
- Fixed _reboot() function for P1
- Fixed serious problem with ASM CONST in BASIC
- Implemented use of MULS/MUL for 16 bit multiplies on P2

Version 4.2.1
- Fixed last minute bug in ORG/END which was causing it not to fcache
- Improved some warning messages for undefined symbols
- Added a number of additional peephole optimizations
- Fixed float constant calculations for calls to functions
- Fixed a spurious error about lastorg mismatch
- Fixed use of return variables in inline assembly not adding an automatic return
- Fixed line numbers in error messages after #include
- Added error message for use of ## with jmp, call, etc.
- Added an error for negative repeat counts
- Made BASIC OPTION case insensitive again

Version 4.2.0
- Added {++cog} and {++lut} to force functions into COG or LUT
- Made ORG in Spin2 fcache the asm
- Enabled fcache by default for P2
- Moved P2 FCACHE to second half of LUT
- Changed symbol resolution so Spin symbols are case insensitive in C
- Dramatically improved parsing of large initializer lists
- Accepted large addresses for jump instructions in inline assembly.
- Fixed C builtin function definitions for _wypin, _wrpin, etc.
- Fixed some cases where user code might be optimized when it shouldn't
- Used ZEROX/SIGNX for sign extension on P2
- Improved handling of floating point constants
- Improved warning messages for indirect jumps
- Reduced namespace clutter (accidental Spin influences) in C and BASIC

Version 4.1.11
- Made _rxraw more forgiving (but slower) in P1
- No longer align P2 output to 32 bytes (matches newer PNut)
- Fixed various bugs in POSIX file functions
- Special case @ operation in REP @x, #N in inline asm

Version 4.1.10
- Added APPEND mode for open
- Added +<= and +>= aliases for +=< and +=> in Spin2
- Allow @"stuff" notation in Spin; means the same as STRING("stuff")
- Added COGCHK function
- Allowed assembly-only C and BASIC files (similar to Spin with only DAT)
- Implemented ONES, QEXP, and QLOG Spin2 operators
- Fixed a problem with negative numbers in Spin CASE statements
- Fixed bytemove, wordmove, longmove to work with overlapping extents
- Fixed a bogus name conflict with some internal variables like "_dir"
- Made OPTION EXPLICIT apply to FOR loop variables

Version 4.1.9
- Added an error for out of range immediate values in inline asm
- Fixed REG[] dereferencing
- Fixed a problem with passing pointers to pointers to functions
- Fixed a problem with subclasses in system module
- Fixed SIGNX and ZEROX operators to work like Spin2
- Fixed conflict of _clkfreq with CLKFREQ
- Fixed a problem with SEND of simple strings
- Fixed a problem with heap initialization in -O2
- Fixed some issues with register operands in inline assembly
- Implemented mount() and getcwd()
- Implemented OPEN FOR in BASIC
- Implemented "public" and "private" keywords in C++ class declarations (they are currently ignored though).
- Reserved some COG memory in P2 mode

Version 4.1.8
- Added CALL and REG builtins for Spin2
- Fixed a problem with coginit of Spin functions which do not return a value
- Fixed using ADDBITS in bitfield expressions
- Fixed using foo.bar in PASM, and allowed foo#bar to refer to any
  kind of thing `bar` (so foo.bar and foo#bar are identical)
- Fixed a bug in transformation of longmove() to moves, and extended
  this to make many more longmoves() be automatically converted
- Use C++ enum scope for any .c files included as classes in other languages

Version 4.1.7
- Fixed a problem that could cause functions to be processed twice
- Fixed a problem with compiling FRAC with a non-register argument
- Fixed a problem with bitfield assignments
- Fixed return value of locktry

Version 4.1.6
- Added FILENAME_MAX to stdio.h
- Added some missing functions to libc.a
- Added a warning for some variable redefinitions
- Fixed a typo in implementation of rqpin
- Fixed BASIC instrrev function
- Fixed BYREF and BYVAL passing of arrays in BASIC
- Fixed some problems with Windows absolute paths
- Fixed a serious memory allocation issue which caused only 1/4 of the
  heap to actually be available
- Supported more Spin2 operators

Version 4.1.5
- Suppressed optimization of inline assembly inside ORG/END (but not ASM/ENDASM)
- Fixed some issues with compiling with the -C flag
- Fixed passing simple local variables by reference
- Fixed float printf with 0 digits after decimal point
- Fixed alignl/alignw in .spin files
- Fixed use of empty function in if statements
- Fixed getrnd instruction without any operands
- Added pinstart(), pinsetup(), and pinclear() builtins
- Added support for x.[m..n] bitfield access in Spin
- Added muldiv64() builtin and FRAC operator
- Added more stdio functions for C
- Added Spin2 SEND builtin

Version 4.1.4
- Fixed a problem with pruning of methods called indirectly via a pointer
- Fixed function pointers pointing outside of current module
- Fixed comments and/or spaces after ASM in Spin code
- Fixed a problem with C local variable names used on RHS of initialization
- Fixed COG PC output in listing files for sub-objects
- Fixed incorrect treatment of functions containing LOOKUP/LOOKDOWN
- Fixed an optimizer bug that could lead to memory corruption sometimes
- Fixed promotion of array arguments to coginit
- Improved stack handling in COG functions
- Implemented default parameter values for C
- Made recognition of _ empty assignment marker be P2 only
- Accept ORG/END as well as ASM/ENDASM for inline assembly in Spin2
- Accept "foo.bar" notation for constants as well as "foo#bar"
- Accept BYTE, WORD, LONG modifiers for Spin local variables
- Accept some uses of $ in inline assembly
- Added some more simpletools functions
- Added many P2 smartpin constants
- Began work on stdio functions
- Recognize <= and >= for .spin2 files
- Made "_" have a special meaning only in .spin2
- Recognize "byte long x" in DAT sections of Spin files

Version 4.1.3
- Allow const qualifier for inline assembly

Version 4.1.2
- Fixed "backwards" case ranges in Spin
- Fixed _rev() operator in C propeller2.h file for P2
- Suppressed removal of unused methods when optimization is turned off
- Used JMPREL to implement case_fast in P2
- Started porting simpletools
- Improved messages about const assignment
- Allow strings in BASIC const declarations
- In C++ class declarations make variables private by default
- Improved some error messages about array declarations

Version 4.1.1
- Fixed Spin REV operator to match PNut's Spin2 definition.
- Optimize some P2 moves into BMASK or DECOD instructions
- Allow the word "asm" to be used as a label in Spin
- Allow use of _ in integers in BASIC DATA/READ

Version 4.1.0
- Added BYREF and BYVAL modifiers to BASIC function parameters
- Added ANDALSO and ORELSE operators to BASIC
- Added +=, -=, *=, /=, AND=, OR=, XOR= assignment operators to BASIC
- Added BIN$, OCT$, and HEX$ builtin functions to BASIC
- Added standard Spin2 functions WRPIN, WXPIN, WYPIN, RDPIN, etc. to Spin and BASIC.
- Added [] pointer dereference operator for FreeBasic compatibility.
- Added exponentiation operator ^ to BASIC
- Added a number of other new builtin functions to BASIC, courtesy of Jeff Roark (see include/libsys/stringlibp2.bas)
- Allowed multiple assignment and functions which return multiple values in BASIC
- Cleaned up -w output a bit for P2
- Implemented _ for skipping assignments in multiple assignments
- Implemented a few more peephole optimizations for P2
- Improved the optimizer's dead register detection
- Implemented automatic clkfreq setting based on _clkfreq
- Made sure all of the results in a multi-result function are initialized to 0 for Spin
- Start Spin file compilation in CON mode
- Updated listing file to (attempt to) track ORG in sub-modules
- Fixed a type promotion problem with bitwise operators in C
- Fixed a problem with calculating sizes of arrays referenced as "foo.bar"
- Fixed comments at end-of-line in Spin
- Fixed a problem with local labels in C __pasm
- Fixed a bug in handling of wcz modifier in inline assembly
- Fixed initialization of local character arrays with strings in C

Version 4.0.6
- Allow "static" and "const" or "volatile" to come in any order in C code
- Fixed a problem with detection of "static" functions (ones without member variable references) which use coginit on non-static functions.
- Updated definition of P2 getct instruction to allow wc
- Various small changes to builtin functions for spin2cpp
- Relax warnings for use of constants in range $1c0-$1ef as registers
- Made sure arrays are converted to pointers in all cases for passing parameters in C

Version 4.0.5
- Fixed static function declarations in C so that declarations in different files do not conflict
- Fixed enum declaration scope in C
- Made optimizer take care not to create djnz with large offsets
- Added a warning in PASM for some uses of integers without '#'.
- Added some missing propeller2.h functions
- Fixed a problem parsing Spin comment blocks containing newlines after an empty REPEAT statement
- Made instructions be automatically aligned in ORG mode (not ORGH mode)
- Made -x flag disable LF->CR+LF translation on serial port
- Print errors for function declared twice
- Re-arranged internal code to make it possible to distinguish C vs C++ or spin1 vs spin2
- Allow empty parameter lists in Spin
- Allow address of function to be taken in Spin
- Added checks for redefined constants

Version 4.0.4
- Implemented top level __asm in C
- Implemented Spin compatible __pasm in C
- Implemented asm shared in BASIC
- Fixed some namespace conflicts between BASIC and C
- Fixed a typo in stdlib.h which caused conflict with math.h
- Added auto baud rate detection capability to SmartSerial
- Fixed an error in switch statement expressions in BASIC
- Fixed the C _pinw function
- Fixed MOD operator in BASIC to work like FastBASIC.
- Printed an error for RES after ORGH
- Allow $ expressions inside RES
- Allow $ to start a hex number in BASIC
- Revert clkfreq and clkmode in BASIC to their old behavior

Version 4.0.3
- Implemented C++ references like "int &c"
- Implemented passing structs by value in C
- Implemented GCC compatible statement expressions
- Added __builtin_expect (does nothing for now)
- Fixed some symbol resolution issues for functions called via pointers
- Fixed incorrect string comparisons in C library
- Fixed incorrect type inference in Spin functions which contain cases
- Fixed an uninitialized variable problem with some large programs
- Made sure case_fast actually does produce a jump table
- Added offsetof() macro and fixed internal error which stopped it from working
- Made -2b the default P2 hardware instead of -2a.

Version 4.0.2
- Fixed Spin quit inside of case
- Optimized sequences of jumps (such as produced by case)
- Fixed floating point comparison bug
- Fixed missing declaration of _basic_print_integer internally

Version 4.0.1
- Added initialization of local arrays and structs in C
- Fixed a static name declaration bug in C
- Fixed floating point output of printf to match standard C

Version 4.0.0
- Fixed in-function array declarations in BASIC
- Fixed using constant members in const declarations in BASIC
- Use printf for translating BASIC print statements
- Allow underscore after decimal point in floating point numbers
- Support ptra++ and --ptra operands in inline assembly
- Revised how CLKMODE and CLKFREQ are handled; made them functions rather than variables and changed some internal code for better compatibility
- Fixed a bug in redefinition of special built-in functions
- Fixed a spurious "Out of memory" message when allocating 0 bytes
- Added -x flag to fastspin to output magic exit code for C programs
- Fixed promotion to unsigned when one operator is unsigned
- Added VAL and VAL% to BASIC
- Fixed a number of small C bugs

Version 3.9.33
- Fixed a bug in encoding wrlut and rdlut instructions in rev 2a
- Fixed wrpin_ functions in Spin (affects P2 SmartSerial object)

Version 3.9.32
- Improved handling of hub addresses in Spin objects
- Fixed some errors in C propeller2.h file
- Fixed lmm=trace
- Fixed C99 for loop declarations
- Allow selection of P2 silicon version via "-2a" or "-2b" flags; for now just plain "-2" selects rev A (original silicon)
- Made __builtin_printf return the number of characters printed, like printf does.
- Improved error checking for LOC and jumps

Version 3.9.31
- Fixed an off-by-one error in SELECT CASE
- Allow slightly longer functions to be inlined (improves pintoggle)
- Fixed getcnt() in BASIC
- Recognize ! as well as # as a suffix to indicate a floating point variable
- Fixed some BASIC parsing problems with empty IF/ELSE conditions and empty subroutines.
- Fixed a problem with printing long strings
- Changed format of error messages to "filename:line: error: stuff" to match the preprocessor's error format and make parsing easier

Version 3.9.30
- Fixed some floating point parsing issues
- Added some missing C stdio functions
- In listing files update the COG address for RES statements
- Reduced use of COG memory in P2
- Fixed some bad formatting in __builtin_printf
- Fixed a bug in BASIC parsing of empty lines
- Fixed return values of some BASIC builtin functions
- Fixed a garbage collector hang
- Added "out of memory" error messages
- Fixed BASIC global multi-dimensional array declarations

Version 3.9.29
- Implemented concrete classes in BASIC
- Implemented function templates in BASIC
- Fixed BASIC new() operator to use managed allocation
- Implemented STR$ for BASIC
- Fixed typos in P2 _clkset function
- Fixed a problem with @ operator applied to labels in Spin code outside of DAT section
- Changed listing file output slightly to force labels to be output at the correct addresses
- Changed order of evaluation of assignments to more closely match original Spin
- Changed result of division by 0 to match Spin

Version 3.9.28
- Only use jump table for switch / select if the density is greater than 1/2
- Do small immediate optimizations even for P2 (it was accidentally P1 only)
- Add error if nop instruction is conditionalized
- Improved output formatting code, particularly for floating point
- Improved error messages for bad addressing modes
- Fixed octal number parsing in C
- Added ability to declare methods in C structs
- Expanded standard C library
- Use the include directory to search for files on the command line if they end with .a.
- Fixed some incorrect detection of unused methods in indirect function calls.

Version 3.9.27
- Fixed a name conflict in some old style C function declarations
- Added CAST operator to BASIC
- Added support in C/C++ output for doing relocation of P2 ASM code at run time (needed for supporting HUB addresses)
- Added CASE_FAST keyword to Spin, and implemented jump tables for C switch, BASIC select, and Spin CASE_FAST
- Added code signature to fastspin.exe

Version 3.9.26
- Added DEF FNA(X)=X form to BASIC
- Fixed declarations of functions inside other C functions
- Fixed SELECT CASE in BASIC when the test is on strings or floats
- Fixed an optimizer bug that affected local arrays
- Fixed space allocation for local arrays in C functions
- On P2, default to 160MHz and 230400 baud if no explicit clkset is given
- Made BASIC read functions support base 16 and base 2 numbers
- Implemented struct assignment for C
- Experimental -z option to compress the code (produces smaller but slower code)

Version 3.9.25
- Unrolled LMM loop some more, for about a 10% performance improvement on code outside of fcache.
- Added --lmm=xxx flag to change LMM interpreter (for test purposes only, really; the default (`orig`) LMM is the best one)
- Changed runtime support code to avoid using CNT shadow register (for GEAR emulator compatibility)
- Added warnings for missing # on jumps
- Fixed scaling of LOC instruction when running in COG mode
- Put spaces between bytes in .lst files.
- Made preprocessor directives like "#define" case-insensitive in Spin and BASIC
- Allow multi-dimensional dim in BASIC
- Add ON x GOTO to BASIC
- Change BASIC number reading code to ignore leading spaces
- Added include/classic.bi, a header file to make porting classic basic games easier.
- Fixed using string initializers for arrays.
- Accept old-style C function declarations
- Accept .a as an extension for C code; this allows us to create a "library" containing a bunch of C declarations with __fromfile() notation to find the implementations.

Version 3.9.24
- Fixed a crash when enums are declared in structs
- On P2 use --fcache=240 when -O2 is passed
- Automatically search for .spin2 extensions first, then .spin ones in Spin OBJ blocks if no explicit file name extension is given.
- Suppress some spurious warnings about orgh in listing files
- Fixed a Spin problem with function calls inside method reference lookups
- Fixed a problem where constant references within strings were evaluated in the wrong context
- Allow Spin code to use any variable as an array

Version 3.9.23
- Caught some cases where function redefinitions were not flagged as errors
- Fixed an optimizer crash when inlining functions containing REP
- Fixed rep count calculation when an augment is needed for large immediate repetitions
- Implemented work-around in CLKSET for RCFAST setting issue
- Allow fcache on P2; must be explicitly enabled though
- Fixed filename extension bug in C/C++ output
- Fixed C++ output for the serial printf functions
- Fixed some problems with output of method calls in spin2cpp output
- Changed the way @@@ relocation is done, and made some P2
  instructions use it so that HUB references work even if there are
  Spin methods present.
- Allow Unicode characters above 0x7f in PASM expressions
- When parsing a UCS-16 file without a preprocessor, convert characters to UTF-8

Version 3.9.22
- Made sure C enums start at 0
- Do not change the order of class declarations, so that sizes can be
  properly calculated
- Always put array variables on the stack
- Fixed some type promotion problems in C
- Fixed a pointer offset bug that affected all languages
- Fixed loop strength reduction of the '?' operator

Version 3.9.21
- Increased stack size on Windows to prevent a crash
- Added if_00, if_same, and other missing P2 conditions
- Fixed an incorrect result for ">| 0" on P2
- Added some P2 specific optimizations
- Added Spin serial drivers to default include directory
- Rewrote C static and variable handling code to fix a number of bugs
  and to allow nested variable scopes to work
- Fixed an optimizer bug where register masks could be created before
  the variables they dependend on were initialized
- Fixed a P2 optimizer bug affecting varargs
- Fixed several C type casting bugs including conversion of arrays and
  functions to pointers
- Fixed handling of enums in C
- Fixed checking for duplicate labels
- Added some standard Spin serial routines to the include/spin folder

Version 3.9.20
- Allow closures to access variables and functions in the enclosing object
- Fixed some parsing problems with inline assembly
- Fixed incorrect inlining of some functions in -O2
- Fixed some C parser errors
- Fixed some C type conversion errors
- Fixed encodings of setpiv and setpix instructions
- Fixed a bug in chained assignments of register ranges

Version 3.9.19
- Fixed problems with path searches
- Fixed HEAPSIZE constant to work properly
- Added short form of lambda expressions to BASIC
- Added OPTION IMPLICIT and OPTION EXPLICIT to BASIC

Version 3.9.18
- Improved BASIC parser to permit more complex expressions
- Support getword and getbyte instructions in inline assembly
- Added INPUT, DATA, READ, and RESTORE commands to BASIC
- Added GOSUB support to BASIC (can only GOSUB to a local label)
- Added SQR and INT to BASIC
- Added some more C library functions
- Added PUB FILE and PRI FILE to Spin
- Added PINLO, PINHI, PINSET, PINTOGGLE functions to BASIC
- Increased default heap size to 4K for P2
- Improved assembly speed when large data structures are included.
- Fixed a bug in looking for files when multiple .. are given
- Fixed <> operator in BASIC
- Fixed array indexing with floats (they need to be converted to int)
- Fixed setbyte/setword/setnib abbreviations
- Improved error handling

Version 3.9.17
- Fixed a serious unsigned / unsigned division bug
- Fixed indirect calls involving structure members
- Fixed promotion of word and byte arguments to functions
- Fixed a typo in the printf code for handling width
- Fixed catch/throw/setjmp/longjmp to correctly restore local variables
- Accept line numbers in BASIC programs
- Added <sys/p2_clock.h> for calculating P2 clock frequency
- Changed location of _clkfreq and _clkmode variables on P2 to match TAQOZ

Version 3.9.16
- Check environment variable FLEXCC_INCLUDE_PATH for included files
- Better relative path finding for include files thanks to David Betz
- Added register keyword for C
- Moved P2 CLKFREQ and CLKMODE longs down to initial hub memory; fixes a memory corruption issue with coginit/cognew
- Implemented struct initialization for C
- Implemented initializing function pointers
- Implemented __builtin_cogstart in C
- Fixed some bugs in indexing arrays of large types
- Fixed problems with using @RESULT in Spin
- Removed use of _wfopen_s in the C preprocessor for Windows

Version 3.9.15
- Fixed abort/catch in P2
- Fixed a problem with quotes in strings
- Fixed potential name conflict with labels, and improved optimization of branches as a side benefit
- Added -H and -E flags to fastspin to allow changing HUB start address. For example, `fastspin -2 -H 0x10000 -E foo.bas` compiles a program to load and execute at address 65536. If the `-E` is left off then it still loads at 0, but is padded to start executing at 0x10000.
- Added some more C library functions

Version 3.9.14
- Fixed a bug where function parameters to Spin functions without type specifiers could be coerced to the wrong type
- Improved C compatibility of various register declarations
- Implemented __builtin_alloca
- Improved optimization of P2 pin functions
- Support multiple statements per line in BASIC
- Implemented DEFSNG and DEFINT in BASIC
- Added optional xsel parameter to P2 clkset function
- Fixed a bug with types in function closures
- Added dirh_, drvh_, flth_, outh_, and similar functions to Spin in P2 mode

Version 3.9.13
- Fixed runtime to get P2 code running on P2 EVAL boards
- Added _setbaud function to change baud rate
- Allow coginit/cognew of function pointers and functions from other
  objects.
- Fixed the BASIC HEAPSIZE constant.
- Implemented "option base" for BASIC, and made "option base 0" the default
- Added "struct __using" and "__fromfile" to C
- Fixed an optimizer bug which affected some FullDuplexSerialversions
- Fixed a preprocessor bug where defines starting with _ were not expanded
- Fixed "dim shared" syntax to match other dim syntaxes
- Reserved DATA, READ, RESTORE keywords in BASIC
- Fixed some P2 optimization bugs

Version 3.9.12
- Fixed a BASIC operator precedence problem (<< and >> should have
  been like * and /)
- Allowed plain EXIT and CONTINUE in BASIC
- Added varargs to C
- Implemented switch in C
- Implemented enums in C
- Implemented static variables in C
- Added inline assembly to C
- Began implementation of structs in C

Version 3.9.11
- Added tail call optimization
- Added simple optimization based on commutative math
- Optimize for loops counting down to 0
- Implemented case sensitivity for C, and an optional -C flag
  to force case sensitivity in other languages
- Fixed a number of type parsing problems in C
- Added a new preprocessor (mcpp) for C
- Report an error if ORGH tries to go backwards
- Added support for more kinds of operands in inline assembly
- Added -D__FLEXSPIN__, -D__FLEXBASIC__, and -D__FLEXC__ defines for
  future compatibility (someday this tool will be renamed).
- Look in {argv[0]}/../include for include files by default

Version 3.9.10
- Added a peephole optimizer to replace "mov x, #0 ; add x, y" with
  "mov x, y"
- Added sqrt() operator to BASIC
- Fixed a problem with passing (some) floating point parameters to functions
- Fixed another REP bug in the P2 optimizer
- Fixed cognew/coginit return value when no free cog is available
- Fixed another CSE bug
- Fixed a floating point display bug (E notation was off by one)
- #ifdef/#endif around #include was broken, fixed now
- Many improvements to the C frontend

Version 3.9.9
- Use P2 encod instruction for >| operator
- Allow x.y expressions to reference constants in an object
- Removed WORD from BASIC types
- Fixed a bug in converting DJNZ to REP in P2 code
- Fixed unsigned divide and remainder in BASIC and C

Version 3.9.8
- Added __propeller__ symbol to preprocessor
- Added SELECT CASE to BASIC
- Fixed a nasty buffer overflow in integer prints
- Fixed close #n (it was losing the object pointer)
- Fixed an optimizer bug in replacing registers
- Fixed an assembly output bug when the input contains only leaf
  functions
- Made for loops with float variables work
- Fixed missing _rx function for P2

Version 3.9.7
- Fixed a bug in converting float values to integer
- Fixed a bug in handling local arrays
- Fixed an error in determining types of memory references
- Used builtin functions to push/pop collections of variables (reduces
  HUB size)
- Added syntax for initializing arrays in BASIC
- Fixed some Mac build issues (thanks to David Betz)

Version 3.9.6
- Re-use the same set of registers for all functions in LMM mode,
  saving/restoring them on function entry/exit. This saves a *lot* of
  COG memory, at the cost of some execution speed and HUB space.
- Added try/catch and LEN to BASIC
- Added anonymous functions and closures to BASIC
- Clean up properly after \ is used without an abort happening
- abort now exits if there is no \ to catch it
- Fixed a bug where methods were incorrectly marked as used

Version 3.9.5
- Fixed stack allocation when HUB bss is removed (-O2 option)
- Implemented global variables
- Updated BASIC I/O functions

Version 3.9.4
- Report errors for use of private methods
- Fixed an optimizer bug that could cause the compiler to crash
- Fixed output of repeated strings of non-zero bytes in the DAT
  section
- Many improvements to BASIC

Version 3.9.3
- Allow backquote (`) to quote special characters in Spin identifiers
- Fixed handling of '(expr)[N]' in PASM blocks
- Fixed lookup of files which have extensions different from .spin
- Fixed an overlooked check for dead registers in optimization
- Added garbage collection and string handling to BASIC.

Version 3.9.2
- Error messages are now formatted as:
    filename.spin(#) error: xxxx
  which is more like openspin and matches FreeBASIC
- Made -l option work properly with DAT output
- Fixed a regression in Spin object pointers
- Fixed operator precedence of the boolean "NOT" operator in Spin
- Fixed an over-agressive optimization
- Added +< and similar unsigned comparison operators to Spin
- Implemented floating point for BASIC, plus many other BASIC
  improvements

Version 3.9.1
- Fixed some bugs in common subexpression elimination
- Fixed conditional instructions in inline assembly
- Improved loop strength reduction optimizations
- Added missing popa instruction for P2, also missing rd/wr address mode
- Added +/ and +// unsigned division operators to Spin
- Started work on BASIC support. This is not complete yet (it won't be
  until 4.0.0).
  
Version 3.8.7
- Improved constant propagation for REP instructions
- Fixed addresses for listing in P1 mode
- Fixed an optimization problem where hw registers could be used
  to hold intermediate values in a calculation
- Fixed relocations for @@@ calculations
- Moved utility functions like longfill into HUB memory to free space
- Added --fcache=N option to fastspin
- Fixed BSS removal optimization for P2

Version 3.8.6
- Added P2 optimization to use REP instruction when possible
- Fixed ##label arguments to rdbyte/wrlong/etc.
- Fixed a bug where aliases like neg a -> neg a,a could generate
  incorrect code
- Fixed CSE where hardware registers are set so that they do not
  invalidate all entries
- Made some improvements to listing files

Version 3.8.5
- Improve inline assembly: allow labels
- Fix string constants in case labels (they should be treated as
  lists)
- Big revision of how listing files are created. This is worse for all
  assembly files (DAT section output is a bit weaker) but much better
  for regular Spin files, which can now have listing files.
- Fixed coginit of Spin methods in P2
- Add a check for recursive symbol definition

Version 3.8.4
- Automatically promote literal strings to string("foo") if they are
  being passed to a function that expects a pointer
- Fixed lockset() on P2 (C flag behavior differs between P1 and P2)
- Changed default hub start for P2 from $800 to $400
- Provide some inline assembly support for C/C++

Version 3.8.3
- Allow multiple return values to in turn be passed to functions as
  parameters
- Allow default values for parameters. So far these must be constant
- added Spin2 <=>, \, and XOR operators
- Fixed a CSE bug with loops containing multiple assignments

Version 3.8.2
- Added warning for instructions that should set C or Z flags not
  doing so

Version 3.8.1
- Added -l flag to fastspin to produce a listing file
- Fixed multiple returns from functions with no parameters
- Added pusha, pushb, modc, modz aliases for P2 instructions
- Various fixes for P2 binary output

Version 3.8.0
- Added multiple assignments like (x,y) := (y,x)
- Added ability for functions to return multiple values
- Made the preprocessor work correctly with Mac encoded files (CR for
  end of line)
- Made fastspin -w work correctly in P2 mode
- if fastspin is named something ending with "spin2" (like
  "fastspin2") then it will start in Propeller2 mode by default
- if no Spin methods are present, do not emit any of the Spin
  initialization code, just output the DAT section 
- simplified parsing of \ expressions

Version 3.7.2
- Updated P2 support to v32
- Fixed some bugs in common subexpression elimination
- Made the --nocse flag to spin2cpp actually work
- Fixed labels at end of input
- Fixed @result in assembly output

Version 3.7.1
- Fixed a nasty bug in assignment operators ("a[i++] += b" was being
  treated as "a[i++] = a[i++] + b", which is obviously wrong)

Version 3.7.0
- Added the -w flag to fastspin to allow creation of assembly language
  wrappers for Spin methods. See docs/SpinPasmIntegration.md for
  details.
- fastspin -O now removes hub bss variables (the VAR block) from the
  .binary; this does not change the actual memory usage at run time,
  but does result in a smaller .binary and hence faster download
- fastspin and spin2cpp no longer have to call themselves to compile
  the .pasm for a --asm binary output
- Better error messages for unexpected characters in the source
- Added strength reduction for multiplication and subtraction
- Convert more loops to use djnz
- Added simplified loop test for loops where the step value is
  constant
- Various other minor optimizations

Version 3.6.6
- Minor tweak to LMM return code
- Use bstc mode in fastspin only if the program name starts with bstc

Version 3.6.5
- Fixed asm output segmentation fault on Debian 64 bit

Version 3.6.4
- Fixed output of const symbols in gas mode
- Fix a hang with --dat --gas output
- In P2 mode, handle hub symbols more like PNut (so usually use byte
  address rather than long address).
- Fixed compilation of getnib, getbyte instructions in P2
- Added check for correct number of operands for instructions found in
  inline assembly
- Added a --require= option to check the version number being used
  
Version 3.6.3
- In --asm --binary mode, delete the final output binary name if
  compilation to assembly fails.
- Fixed a bug in handling C++ methods forced to be static due to
  their use in cognew
- Fixed another optimizer bug (forward propagation of constants was
  crossing call boundaries, which caused problems with things changed
  by the call)
- Fixed immediates on destinations in P2 (like rdfast #0, foo)
- Implemented 3 operand P2 instructions like getbyte, setnib, and
  fixed a few other missing P2 instructions

Version 3.6.2
- fastspin can now compile to binary for P2
- Fixed an optimizer bug where it tried to change INA from a src in
  one instruction to a dest in another (INA as dest points to RAM
  rather than register)
- Fixed preprocessor handling of quoted characters
- Partially updated P2 instructions to v18

Version 3.6.1
- fixed a bogus error about function symbols used as array
  dereferences
- fixed type casting of function return values used in expressions

Version 3.6.0

- added Spin2 style object declarations and casts
- PASM output did not handle arrays of objects correctly, now it does
- fixed a preprocessor bug with #ifdef

Version 3.5.1

- Fixed incorrect output of float expressions in --gas mode.
- Fixed a problem with the name of the ..dat_start in --gas mode if the
  base file name contains spaces
- Added a C / C++ options dialog to spinconvert
- Updated copyright notices.

Version 3.5.0

- Added type inference so that C/C++ code has types that are more
  like what a human programmer would add.
- Fixed a problem with assignments inside other operators (evaluation
  was not in the same order as traditional Spin)
  
Version 3.4.1

- Fixed an issue with the not operator on its own (should have
  been turned into an assignment)
  
Version 3.4.0

- Completely revamped --gas output to make it easier to edit and
  to support some constructs (like multiple .org) that could not
  be used in earlier versions of --gas. DAT sections in --gas are
  now quite human readable (and more importantly, modifyable).
- Preserve DAT section comments in --gas output.
- Changed #define for constants so that we can distinguish constants
  in different objects.
  
Version 3.2.3

- Added --side option to create a SimpleIDE .side file.

Version 3.2.2

- Fix coginit/cognew of Spin methods in C mode
- Added --version flag (also -v)
- Fixed a problem with calculating labels after DAT section
  expressions like FOO[3]

Version 3.2.1

- Print (some) PASM comments in gas output
- Fixed -c switch for fastspin
- Fixed a bug with multiple coginits
- Fixed a bug in translation of wordfill/bytefill to C
- Make coginit/cognew of Spin methods work with old PropGCC library

Version 3.2.0

- Use a simpler, faster multiply routine if the program never needs
  the upper 32 bits of the result.
- Added code for optimizing divides by integer powers of 2
- Fixed a bug printing non-ASCII characters
- Fixed several issues preventing the S3 source code from converting
  to C.
- Use C "switch" statements for Spin case where all the labels are
  constant
- Add basic common subexpression elimination option (--cse). This is
  not enabled by default because it still has some issues.

Version 3.1.3

- Use "res" for FCACHE space
- Fix bug involving local variables that are arrays
- Improve re-use of variable memory
- Optimize away some redundant branches

Version 3.1.2

- Use "res" instead of "long" to define the object block
- Slightly improve loop optimization by re-arranging optimize passes
- Fix multi-pin assignments to be atomic
- If fastspin.exe is invoked as bstc.exe, it tries to mimic bstc's
  output.

Version 3.1.1

- Make leaf functions share temporary registers and local variables
- Do not inline functions whose calling conventions
  require stack manipulation

Version 3.1.0

- Added (preliminary) --p2 support for Propeller 2.
- Added fcache support for Propeller 1.
- If a function is called only once, and we can eliminate it by
  inlining it, do so.
  
Version 3.0.6

- Added a check to make sure the immediate is on the right operand
  (previously "mov #2, 3" was parsed the same as "mov 2, #3")

Version 3.0.5

- Added --eeprom option to produce an EEPROM file
- Added --cc= option to change C compiler
- Improved optimization of pin masks in some cases
- Allow {++ ... } to insert C++/C code inside PUB or PRI.
- Changed the __SPIN2X__ define to __SPINCVT__. The old __SPIN2X__
  symbol is still defined in the preprocessor for now, but is deprecated.
- Added a fastspin front end that mimics the openspin arguments.

Version 3.0.4

- Tweaked a few items in the GUI

Version 3.0.3

- Fixed a problem with the round() function not being recognized in
  C/C++ code, and with round() and trunc() output.
- Fixed abort with no explicit expression in C/C++

Version 3.0.2

- Added support for SPR and for arrays in cog memory generally.
- Allowed --data=cog

Version 3.0.1

- Fixed the distributed .zip file to have the correct spin2cpp
  versions.
- Added a Spin prefix function for --asm output (so other Spin
  compiler may be used)


Version 3.0.0

- Added a code generator to allow for PASM output. spin2cpp --asm can
  function as a compiler independent of PropGCC. With --code=hub it
  will produce LMM code, otherwise it produces COG code. Using
  --binary after --asm will cause a final binary to be produced. Using
  -g after --asm will cause the original Spin code to be inserted in
  the .pasm output.
- Added a simple GUI (spinconvert). See the Help option in spinconvert
  for details
- Added predefined symbols: __SPIN2CPP__ for C/C++ output,
  __SPIN2PASM__ for assembler output
- Added IF/THEN/ELSE expressions, e.g. x := IF x>0 then 0 ELSE x-1
- Extensive internal changes

==========================================================================
Version 1.96

- Made the PASM file directive search the same way we look for Spin files
- Added -I and -L options to search for files in a different path
- Functions which do not return a value are now declared as void
- Fixed coginig/cognew on Spin methods that are not static
- Some internal clean-ups

Version 1.95

- Improved detection of static member functions
- Implemented coginit/cognew for Spin methods (still WIP)
- Removed the volatile qualifier from __asm__ at top level (the C++
  parser likes it, but plain C does not)
- Added commonly used C functions like strcpy to the list of C reserved
  words that we check for name conflicts
- Fixed a preprocessor problem with long file names

Version 1.94

- Declare methods that obviously don't use object variables as "static"
- Supported the bstc @@@ operator (only in --gas mode right now)
- Implemented SPR pseudo-variable for hardware registers
- Cleaned up handling of -o option for .dat, .elf, and .binary
- Fixed some output problems in --gas mode
- Various minor bug fixes

Version 1.93

- Made for loop output more idiomatic
- Print symbolic constants rather than the values they resolve to
- Fixed illegal characters in file names used as class names
- Added some debug directives
- Made -o option more useful with --binary
- Really fixed --binary checksum setting
- Added support for setting _clkfreq and _clkmode

Version 1.92

- Made the lookup/lookdown output code compatible with more recent gccs
- Fixed --binary checksum calculation

Version 1.91

- Preserve comments in Spin code.
- Recognize foo.long[N] syntax.
- Use C for loops for more Spin repeat loops.
- Use memset for the common case of filling memory with 0.
- Added clksPet and clkmode.
- Preserve original case of Spin identifiers (unless --normalize is
  given).
- Automatically add volatile qualifier to class variables if some
  class members are accessed via the address operator.
- Added --catalina option to run convert to C then run Catalina C compiler.

Version 1.05

- Fixed a problem with double negation or negation of boolean operators
  being printed as a predecrement.
- Fixed usage of ID[n] in PASM code (where ID is a constant).

Version 1.04

- Fix precedence of NOT operator
- Add quoting for spaces inside file names
- Produce an error for redefined labels in DAT sections.
- Rename constants that start with an _ to avoid conflicts with C.
- Fix "reversed" range expressions like OUTA[9..10].

Version 1.03

- Use for() loop instead of do/while for simple counting loops
- Added a -o option to specify the output file name
- Fixed error messages after #include (so correct line number and file
  information is preserved)
- Made the search paths for #include and OBJ sections relative to the
  currently processed file.
- Added --binary output option to produce a .binary file
- Fixed a bug in the DAT section output for classes with names that
  have "Spin" appended.
- Fixed DAT section output in C mode.
- Fixed several other miscellaneous bugs.

Version 1.02

- Made CON section accept x[y] syntax for skipping over ranges of values
- Modified C/C++ output so that unused return values are not declared
- Fixed reboot command to really reboot (not just abort)
- Fixed a typo which could cause segmentation faults
- Follow Spin's practice of allowing the first object of an object
  array to be used without a subscript.
- Accept annotations on the DAT section of a file.

Version 1.01

- Output symbolic names for constants instead of the constant value itself
- Added missing =>= and =<= operators
- Put the spin2cpp version number in the comment header of generated
  files

Version 1.00

- Fixed a problem with parsing negative floating point constants
- Fixed use of $ in PASM data declarations
- Some fixes to the internal source code

Version 0.99

- Added preliminary support for translating PASM to GAS (--gas)
- Added support for waitpne and waitpeq
- Fixed the trunc operator
- Fixed some issues with constants declared in other objects
- Fixed a problem with catching abort of functions with no parameters

Version 0.98

- Cleaned up and improved preprocessor
- Added #include, #elseifdef, #elseifndef
- Further improved Catalina support
- Fixed an issue with returns inside if statements
- Made error messages more consistent (now they all have the format
  "file:line: message", like Catalina and gcc)


Version 0.97

- Added a simple preprocessor similar to the one in bstc
- A comment giving the command line is output at the start of files
- Somewhat improved support for Catalina
- Some minor bugs fixes

Version 0.96 New in this version:

- preliminary support for output of C code instead of C++
- fix the order of defines so constants in one object may be used to
define constants in another object
- support for placing C code inline in the Spin code (via "annotations")
- bug fix for reverse()
- sort variables the way Spin does

Version 0.95. New in this version:

- arrays of objects
- fix outa[pin] with variable pin
- handle TAB characters correctly
- various other bug fixes

Version 0.9. New in this version:

- correct handling of files that do not end in a newline
- fixed array references
- fixed nesting of objects more than 2 deep
- work around some library and compiler issues with the abort feature
- better handling of bit set and clear
- fixed a bug preventing PASM instructions from always being aligned
- --files option to list generated .cpp files
- --elf option to automatically invoke propeller-elf-gcc to compile the .spin file
